; This code is commented by Ehsan Kourkchi
; to practice some lisp
; October 8 2015
;
; Based on the puzzle introduced here:
; http://www.math.tamu.edu/~dallen/hollywood/diehard/diehard.htm
;
; To load this program in lisp:
; lisp > (load "water_jugs.lisp")
;
; You need to have the file "search.lisp" in the same directory as this file. 
;
;  
; To run:
;   lisp > (start-over jug-A-capacity jug-B-capacity goal-gallon)
;   
; Example: lisp >  (start-over 7 3 5)
;; ;; first node on open = ((0 0) NIL 0)
;; ;; first node on open = (NIL (0 0) 1)
;; ;; first node on open = ((7 0) (0 0) 1)
;; ;; first node on open = ((7 3) (7 0) 2)
;; ;; first node on open = ((4 3) (7 0) 2)
;; ;; first node on open = ((4 0) (4 3) 3)
;; ;; first node on open = ((1 3) (4 0) 4)
;; ;; first node on open = ((1 0) (1 3) 5)
;; ;; first node on open = ((0 1) (1 0) 6)
;; ;; first node on open = ((7 1) (0 1) 7)
;; ;; first node on open = ((5 3) (7 1) 8)
;; ;; length of closed = 10
;; ;; length of open = 1
;; ;; solution path = ((0 0) (7 0) (4 3) (4 0) (1 3) (1 0) (0 1) (7 1) (5 3))
;; ;; NIL


capacity of A: 7-gallons
capacity of B: 3-gallons

Solution chain:
(A B)
(0 0)  
(7 0) - fill A 
(4 3) - A to B
(4 0) - empty B
(1 3) - A to B
(1 0) - empty B
(0 1) - A to B
(7 1) - fill A
(5 3) - A to B
The jug A has 5-gallon which is the goal